{"version":3,"sources":["zustand/store.tsx","components/Avatars.tsx","components/Toast.tsx","views/Home.tsx","zustand/game.tsx","components/GameSettings.tsx","components/LobbyMembers.tsx","components/ModalBody.tsx","views/Lobby.tsx","zustand/chats.tsx","components/ResultCard.tsx","components/SketchBoard.tsx","components/Palette.tsx","components/ScoreCard.tsx","components/GuessInput.tsx","components/Chatbox.tsx","components/Timer.tsx","components/Word.tsx","components/Score.tsx","components/GameBar.tsx","views/Playground.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["INIT_STATE","isHost","avatar","turn","members","GLOBAL_VARS","socket","io","Socket","room","name","useStore","create","set","get","setSocket","setRoom","setName","setMembers","addMember","newMember","state","removeMember","exMember","console","log","filter","member","socketID","setIsHost","setAvatar","setTurn","reset","getSocket","getRoom","getName","getAvatar","getIsHost","Avatars","selectedAvatar","id","Grid","container","justify","avatars","map","index","isSelected","item","md","sm","xs","onClick","className","style","border","paddingBottom","src","width","height","viewBox","fill","xmlns","fill-rule","d","toastInfo","message","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","toastError","error","Toast","props","newestOnTop","rtl","pauseOnFocusLoss","Home","useCallback","useRef","history","useHistory","nameValidation","length","Card","CardContent","noValidate","autoComplete","TextField","label","variant","defaultValue","onChange","e","target","value","trim","Button","color","on","roomID","memberDetails","score","replace","emit","host_name","marginTop","margin","inputProps","InputLabelProps","top","current","window","location","protocol","hostname","port","RegExp","test","split","myTurn","selectedWord","roundLength","timeRemaining","setMyTurn","setSelectedWord","setRoundLength","startCountdown","startFrom","Math","floor","Date","getTime","parse","countdown","setInterval","clearInterval","getMyTurn","resetGameStore","GameSettings","numMembers","startGame","useGameStore","useState","numRounds","setNumRounds","FormControl","InputLabel","Select","labelId","time","MenuItem","rounds","round_length","disabled","React","memo","LobbyMembers","fontWeight","ModalBody","modalHandler","setDisabled","onSubmit","preventDefault","submit","type","useStyles","makeStyles","theme","createStyles","modal","display","alignItems","justifyContent","paper","backgroundColor","boxShadow","shadows","padding","spacing","Lobby","modalOpen","setModalOpen","useParams","classes","useEffect","nonHostSocketFns","socketFns","membersInThisRoom","roundDetails","wordLength","startTime","word","i","disconnect","Modal","aria-labelledby","aria-describedby","open","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","chats","addChat","newChat","clearChats","ResultCard","memberScores","palette","background","Sketchboard","getColor","canvasRef","isDrawing","x","y","strokesBuffer","wordChoices","overlayContent","canvasSize","setCanvasSize","overlay","setOverlay","setOpen","useChatsStore","init","strokeSendingInterval","sendStrokes","removeEventListener","canvasSizeHandler","strokes","stroke","newCoordinates","currentCoordinates","draw","words","clearCanvas","timerForNextTurn","results","attachEventListeners","canvasBackground","addEventListener","canvas","onMouseDown","onMouseMove","onMouseUp","handleEventType","toDraw","setPosition","coordinates","MouseEvent","pageX","offsetLeft","pageY","offsetTop","changedTouches","clientX","clientY","push","newX","newY","currentContext","getContext","lineWidth","strokeStyle","beginPath","moveTo","lineTo","closePath","setTimeout","fillStyle","fillRect","screenWidth","outerWidth","round","clearRect","Collapse","ref","pointerEvents","marginRight","marginLeft","choice","chooseWord","Palette","setColorInParent","colors","selectedColor","setSelectedColor","mobileView","setMobileView","palleteHandler","colorsJSX","colorGroup","j","displayColors","ScoresList","smallScreen","setSmallScreen","scoreCardLayout","GuessInput","submitGuess","guess","setGuess","Chatbox","chatboxRef","scrollTop","scrollHeight","chat","sender","Timer","fontSize","minutes","seconds","toString","displayTime","Word","generateUnderscores","setScore","currentScore","GameBar","Playground","chatDrawer","setChatDrawer","smallScreenView","setSmallScreenView","layoutHandler","Drawer","anchor","onClose","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e437d94.chunk.js","sourcesContent":["import create from 'zustand';\r\nimport io from 'socket.io-client';\r\n\r\ntype State = {\r\n    isHost: boolean\r\n    avatar: number\r\n    turn: boolean\r\n    members: Member[]\r\n\r\n    setSocket: (socket: SocketIOClient.Socket) => void\r\n    setRoom: (room: string) => void\r\n    setName: (name: string) => void\r\n    setMembers: (members: Member[]) => void\r\n    addMember: (newMember: Member) => void\r\n    removeMember: (exMember: string) => void\r\n    setIsHost: (isHost: boolean) => void\r\n    setAvatar: (avatar: number) => void\r\n    setTurn: (turn: boolean) => void\r\n    reset: () => void\r\n\r\n    getSocket: () => SocketIOClient.Socket\r\n    getRoom: () => string\r\n    getName: () => string\r\n    getIsHost: () => boolean\r\n    getAvatar: () => number\r\n}\r\n\r\ntype GLOBAL_VAR = {\r\n    socket: SocketIOClient.Socket\r\n    room: string\r\n    name: string\r\n}\r\n\r\ntype Member = {\r\n    socketID: string\r\n    memberDetails: {\r\n        name: string\r\n        avatar: number\r\n    }\r\n    score: number\r\n}\r\n\r\nconst INIT_STATE = {\r\n    isHost: false,\r\n    avatar: 0,\r\n    turn: false,\r\n    members: []\r\n}\r\n\r\nconst GLOBAL_VARS: GLOBAL_VAR = {\r\n    socket: io.Socket,\r\n    room: \"\",\r\n    name: \"\"\r\n}\r\n\r\nconst useStore = create<State>((set, get) => ({\r\n    ...INIT_STATE,\r\n\r\n    setSocket: (socket: SocketIOClient.Socket) => GLOBAL_VARS.socket = socket,\r\n    setRoom: (room: string) => GLOBAL_VARS.room = room,\r\n    setName: (name: string) => GLOBAL_VARS.name = name,\r\n    setMembers: (members: Member[]) => set({ members }),\r\n    addMember: (newMember: Member) => set(state => ({ members: [...state.members, newMember] })),\r\n    removeMember: (exMember: string) => set(state => {\r\n        let members = state.members\r\n        console.log(exMember, members)\r\n        members = members.filter(member => member.socketID !== exMember)\r\n        return { members }\r\n    }),\r\n    setIsHost: (isHost: boolean) => set({ isHost }),\r\n    setAvatar: (avatar: number) => set({ avatar }),\r\n    setTurn: (turn: boolean) => set({ turn }),\r\n    reset: () => {\r\n        set({ ...INIT_STATE, avatar: get().avatar })\r\n        GLOBAL_VARS.socket = io.Socket\r\n        GLOBAL_VARS.room = \"\"\r\n    },\r\n    \r\n    getSocket: () => GLOBAL_VARS.socket,\r\n    getRoom: () => GLOBAL_VARS.room,\r\n    getName: () => GLOBAL_VARS.name,\r\n    getAvatar: () => get().avatar,\r\n    getIsHost: () => get().isHost\r\n}))\r\n\r\nexport default useStore","import React, { useState, useEffect } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport { Grid } from '@material-ui/core';\r\nimport { avatars } from \"../data/data.json\";\r\nimport './styles/Avatars.css';\r\n\r\nconst Avatars: React.FC = () => {\r\n    const { selectedAvatar, setAvatar } = useStore(state => ({\r\n        selectedAvatar: state.avatar,\r\n        setAvatar: state.setAvatar\r\n    }))\r\n\r\n    return (\r\n        <>\r\n            <h1 id=\"avatarsTitle\">Choose an Avatar !</h1>\r\n            <Grid container justify=\"center\">\r\n                {avatars.map((avatar, index) => {\r\n                    const isSelected = (selectedAvatar === index)\r\n                    return (\r\n                        <Grid item md={2} sm={4} xs={6} onClick={() => setAvatar(index)}>\r\n                            <div className=\"avatarsContainer\" style={{ border: isSelected ? '2px solid black' : '' }}>\r\n                                <div style={{ paddingBottom: !isSelected ? '1.75em' : 0 }}>\r\n                                    <img src={`/images/${avatar}`} className=\"avatar\" />\r\n                                </div>\r\n                                {isSelected && \r\n                                    <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" fill=\"green\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <path fill-rule=\"evenodd\" d=\"M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z\"/>\r\n                                    </svg>\r\n                                }\r\n                            </div>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Avatars","import React from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst Toast: React.FC = (props) => {\r\n    return (\r\n        <ToastContainer\r\n          position=\"top-center\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          newestOnTop={false}\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnFocusLoss={false}\r\n          draggable\r\n          pauseOnHover\r\n        />\r\n    )\r\n}\r\n\r\nexport const toastInfo = (message: string) => {\r\n    toast.info(message, {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true\r\n    });\r\n}\r\n\r\nexport const toastError = (message: string) => {\r\n    toast.error(message, {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        closeOnClick: true,\r\n        hideProgressBar: true,\r\n        pauseOnHover: true,\r\n        draggable: true\r\n    });\r\n}\r\n\r\nexport default Toast","import React, { useCallback, useRef } from 'react';\r\nimport Avatars from '../components/Avatars';\r\nimport useStore from '../zustand/store';\r\nimport { useHistory } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport { Card, CardContent, TextField, Button, Grid } from '@material-ui/core';\r\nimport { toastError } from '../components/Toast';\r\nimport \"./styles/Home.css\";\r\n\r\nconst Home: React.FC = (props) => {\r\n    const { setSocket, setRoom, setName, setIsHost, setMembers, getName, getAvatar } = useStore(useCallback(state => ({\r\n        setSocket: state.setSocket,\r\n        setRoom: state.setRoom,\r\n        setName: state.setName,\r\n        setIsHost: state.setIsHost,\r\n        setMembers: state.setMembers,\r\n\r\n        getName: state.getName,\r\n        getAvatar: state.getAvatar\r\n    }), []))\r\n\r\n    const room = useRef<string>(\"\")\r\n    const history = useHistory();\r\n\r\n    const createRoom = () => {\r\n        const name = getName()\r\n        const avatar = getAvatar()\r\n        if(!nameValidation(name)){\r\n            return\r\n        }\r\n        const socket = io(\"/\")\r\n        setSocket(socket)\r\n        socket.on(\"roomID\", (roomID: string) => {\r\n            setRoom(roomID)\r\n            setIsHost(true)\r\n            setMembers([{ \r\n                socketID: socket.id, \r\n                memberDetails: { \r\n                    name,\r\n                    avatar: avatar + 1\r\n                },\r\n                score: 0\r\n            }])\r\n            history.replace(`/lobby/${roomID}`)\r\n        })\r\n        socket.emit(\"create room\", { host_name: name, avatar: avatar + 1 })\r\n    }\r\n\r\n    const join = () => {\r\n        const name = getName()\r\n        if(!nameValidation(name)){\r\n            return\r\n        }\r\n        let { protocol, hostname, port } = window.location\r\n        if(window.location.port !== \"\"){\r\n            hostname += \":\" + port\r\n        }\r\n        const urlRegex = new RegExp(`^${protocol}\\/\\/${hostname}\\/lobby\\/([a-z0-9\\-])\\/?`)\r\n        if(!urlRegex.test(room.current)){\r\n            toastError(\"Enter valid room URL\")\r\n            return\r\n        }\r\n        const roomID = room.current.split(\"/\")[4]\r\n        history.replace(`/lobby/${roomID}`)\r\n    }\r\n\r\n    const nameValidation = (name: string) => {\r\n        if(name === \"\"){\r\n            toastError('Please enter a name')\r\n            return false\r\n        }\r\n        else if(name.length < 3 || name.length > 15){\r\n            toastError('Name should be 3-15 characters long')\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    return (\r\n        <div id=\"home-background\">\r\n            <h1 id=\"title\">LETS SCRIBBLE</h1>\r\n            <div id=\"card-container\">\r\n                <Card id=\"main-card\">\r\n                    <CardContent>\r\n                        <form noValidate autoComplete=\"off\">\r\n                            <div id=\"name-input-container\">\r\n                                <TextField id=\"filled-basic\" label=\"Enter Name\" variant=\"filled\" defaultValue={getName()} onChange={e => setName(e.target.value.trim())} />\r\n                            </div>\r\n                            <Avatars />\r\n                            <div id=\"buttons-container\">\r\n                                <Grid container>\r\n                                    <Grid item md={5} sm={12} xs={12}>\r\n                                        <Button id=\"create-room-button\" variant=\"contained\" color=\"primary\" onClick={createRoom}>\r\n                                            Create Private Room\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item md={2} sm={12} xs={12} id=\"or\">OR</Grid>\r\n                                    <Grid item md={5} sm={12} xs={12} justify=\"center\">\r\n                                        <div style={{ marginTop: -3 }}>\r\n                                            <TextField label=\"Enter Room URL\" variant=\"outlined\" style={{ margin: '0 8px 10px 0' }} \r\n                                                inputProps={{\r\n                                                    style: {\r\n                                                        height: 7\r\n                                                    },\r\n                                                }} \r\n                                                InputLabelProps={{\r\n                                                    style: {\r\n                                                        top: -6\r\n                                                    },\r\n                                                }} \r\n                                                onChange={e => {\r\n                                                    room.current = e.target.value\r\n                                                }} \r\n                                            />\r\n                                            <Button variant=\"contained\" onClick={join}>\r\n                                                Join\r\n                                            </Button>    \r\n                                        </div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </div>\r\n                        </form>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import create from 'zustand';\r\n\r\ntype State = {\r\n    myTurn: boolean\r\n    selectedWord: string\r\n    roundLength: number\r\n    timeRemaining: number\r\n\r\n    setMyTurn: (myTurn: boolean) => void\r\n    setSelectedWord: (selectedWord: string) => void\r\n    setRoundLength: (roundLength: number) => void\r\n    startCountdown: (startFrom?: string) => void\r\n    getMyTurn: () => boolean\r\n    resetGameStore: () => void\r\n}\r\n\r\nconst INIT_STATE = {\r\n    myTurn: false,\r\n    selectedWord: \"\",\r\n    roundLength: 30,\r\n    timeRemaining: 30\r\n}\r\n\r\nconst useStore = create<State>((set, get) => ({\r\n    ...INIT_STATE,\r\n    setMyTurn: (myTurn: boolean) => set({ myTurn }),\r\n    setSelectedWord: (selectedWord: string) => set({ selectedWord }),\r\n    setRoundLength: (roundLength: number) => set({ roundLength, timeRemaining: roundLength }),\r\n    startCountdown: (startFrom) => {\r\n        if(startFrom){\r\n            const timeRemaining = get().roundLength - Math.floor((new Date().getTime() - Date.parse(startFrom)) / 1000)\r\n            set({ timeRemaining })\r\n        }\r\n        else{\r\n            set({ timeRemaining: get().roundLength })\r\n        }\r\n        const countdown = setInterval(() => {\r\n            const timeRemaining = get().timeRemaining\r\n            if(timeRemaining === 0) {\r\n                clearInterval(countdown)\r\n            }\r\n            else {\r\n                set({ timeRemaining: timeRemaining - 1 })\r\n            }\r\n        }, 1000)\r\n    },\r\n    getMyTurn: () => get().myTurn,\r\n    resetGameStore: () => set({ ...INIT_STATE })\r\n}))\r\n\r\nexport default useStore","import React, { useState, useCallback } from 'react';\r\nimport {\r\n    InputLabel,\r\n    MenuItem,\r\n    FormControl,\r\n    Select,\r\n    Button,\r\n    Card,\r\n    CardContent\r\n} from \"@material-ui/core\";\r\nimport useGameStore from '../zustand/game';\r\nimport './styles/GameSettings.css';\r\n\r\ntype Settings = {\r\n    round_length: number, \r\n    numRounds: number\r\n}\r\n\r\ntype Props = {\r\n    numMembers: number\r\n    startGame: (gameSettings: Settings) => void\r\n}\r\n\r\nconst GameSettings: React.FC<Props> = ({ numMembers, startGame }) => {\r\n    const { roundLength, setRoundLength } = useGameStore(useCallback(state => ({\r\n        roundLength: state.roundLength,\r\n        setRoundLength: state.setRoundLength\r\n    }), []))\r\n    const [numRounds, setNumRounds] = useState<number>(1)\r\n\r\n    return (\r\n        <div id=\"settingsFormContainer\">\r\n            <Card>\r\n                <h2 id=\"settingsTitle\">Settings</h2>\r\n                <CardContent>\r\n                    <div className=\"fieldsContainer\">\r\n                        <FormControl variant=\"outlined\" className=\"inputs\">\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Round length</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                value={roundLength}\r\n                                onChange={e => setRoundLength(e.target.value as number)}\r\n                                label=\"Round length\"\r\n                            >\r\n                                {[30, 60, 90, 120, 150].map(time => (\r\n                                    <MenuItem value={time}>{time} seconds</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"fieldsContainer\">\r\n                        <FormControl variant=\"outlined\" className=\"inputs\">\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Number of rounds</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                value={numRounds}\r\n                                onChange={e => setNumRounds(e.target.value as number)}\r\n                                label=\"Number of rounds\"\r\n                            >\r\n                                {[1, 2, 3, 4, 5].map(rounds => (\r\n                                    <MenuItem value={rounds}>{rounds}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"fieldsContainer\">\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => startGame({ \r\n                            numRounds, \r\n                            round_length: roundLength\r\n                        })} disabled={numMembers < 2}>Start game</Button>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(GameSettings)","import React from 'react';\r\nimport { Card, CardContent, Grid } from '@material-ui/core';\r\nimport './styles/LobbyMembers.css'\r\n\r\ntype Member = {\r\n    socketID: string\r\n    memberDetails: {\r\n        name: string\r\n        avatar: number\r\n    }\r\n    score: number\r\n}\r\n\r\ntype Props = {\r\n    members: Member[]\r\n    isHost: boolean\r\n    socketID: string\r\n}\r\n\r\nconst LobbyMembers: React.FC<Props> = ({ members, isHost, socketID }) => {\r\n    return (\r\n        <div style={{ width: isHost ? '85%' : '78%' }}>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container id=\"membersContainer\">\r\n                        {members.map(member => (\r\n                            <Grid item md={isHost ? 3 : 2} sm={4} xs={6}>\r\n                                <img src={`/images/avatar_${member.memberDetails.avatar}.jpg`} className=\"lobbyAvatars\" />\r\n                                <p className=\"memberName\" style={{ fontWeight: socketID === member.socketID ? 'bold' : 'normal' }}>{member.memberDetails.name}</p>\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LobbyMembers","import React, { useState, useCallback } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport Avatars from './Avatars';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { toastError } from './Toast';\r\nimport './styles/ModalBody.css';\r\n\r\ntype Props = {\r\n    modalHandler: () => void\r\n}\r\n\r\nconst ModalBody: React.FC<Props> = ({ modalHandler }) => {\r\n    const { getName, setName } = useStore(useCallback(state => ({ getName: state.getName, setName: state.setName }), []))\r\n\r\n    const [disabled, setDisabled] = useState<boolean>(false)\r\n\r\n    const submit = (e: React.FormEvent) => {\r\n        e.preventDefault()\r\n        setDisabled(true)\r\n        const name = getName()\r\n        if(name === \"\"){\r\n            toastError('Please enter a name')\r\n            setDisabled(false)\r\n            return\r\n        }\r\n        if(name.length < 3 || name.length > 15){\r\n            toastError('Name should be 3-15 characters long')\r\n            setDisabled(false)\r\n            return\r\n        }\r\n        modalHandler()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form noValidate autoComplete=\"off\" id=\"modalContainer\" onSubmit={e => submit(e)}>\r\n                <TextField id=\"standard-basic\" label=\"Enter name\" defaultValue={getName()} onChange={e => setName(e.target.value.trim())} />\r\n                <div id=\"avatars\">\r\n                    <Avatars />\r\n                </div>\r\n                <Button type=\"submit\" id=\"submit\" disabled={disabled}>Submit</Button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModalBody","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport useGameStore from '../zustand/game';\r\nimport GameSettings from '../components/GameSettings';\r\nimport LobbyMembers from '../components/LobbyMembers';\r\nimport ModalBody from '../components/ModalBody';\r\nimport { Modal, Backdrop, Fade, Grid } from '@material-ui/core';\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport { toastError } from \"../components/Toast\";\r\nimport './styles/Lobby.css';\r\n\r\ntype RouteParams = {\r\n    room: string\r\n}\r\n\r\ntype Member = {\r\n    socketID: string\r\n    memberDetails: {\r\n        name: string\r\n        avatar: number\r\n    }\r\n    score: number\r\n}\r\n\r\ntype Settings = {\r\n    round_length: number, \r\n    numRounds: number\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        modal: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\"\r\n        },\r\n        paper: {\r\n            backgroundColor: \"#f5f5f5\",\r\n            border: \"2px solid #000\",\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3)\r\n        }\r\n    }),\r\n);\r\n\r\nconst Lobby: React.FC = (props) => {\r\n    const { \r\n        isHost, \r\n        members,\r\n        \r\n        setSocket,\r\n        setRoom,\r\n        setMembers,\r\n        addMember,\r\n        removeMember,\r\n        setIsHost,\r\n        \r\n        getSocket,\r\n        getRoom,\r\n        getName,\r\n        getAvatar\r\n        \r\n    } = useStore(useCallback(state => ({\r\n        isHost: state.isHost,\r\n        members: state.members,\r\n        \r\n        setSocket: state.setSocket,\r\n        setRoom: state.setRoom,\r\n        setMembers: state.setMembers,\r\n        addMember: state.addMember,\r\n        removeMember: state.removeMember,\r\n        setIsHost: state.setIsHost,\r\n\r\n        getSocket: state.getSocket,\r\n        getRoom: state.getRoom,\r\n        getName: state.getName,\r\n        getAvatar: state.getAvatar\r\n    }), []))\r\n\r\n    const { setSelectedWord, setRoundLength, startCountdown } = useGameStore(useCallback(state => ({ \r\n        setSelectedWord: state.setSelectedWord,\r\n        setRoundLength: state.setRoundLength,\r\n        startCountdown: state.startCountdown\r\n    }), []))\r\n\r\n    const [modalOpen, setModalOpen] = useState<boolean>(false)\r\n\r\n    const history = useHistory()\r\n    const { room } = useParams<RouteParams>()\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if(getRoom() === \"\"){\r\n            setRoom(room)\r\n\r\n            if(!getSocket().id && getName() === \"\"){\r\n                setModalOpen(true)\r\n            }\r\n            else{\r\n                nonHostSocketFns()\r\n                socketFns()\r\n            }\r\n        }\r\n        else{\r\n            socketFns()\r\n        }\r\n    }, [])\r\n\r\n    const nonHostSocketFns = () => {\r\n        const socket = io(\"/\")\r\n        setSocket(socket)\r\n        \r\n        socket.on(\"members in this room\", (membersInThisRoom: Member[], roundDetails: { wordLength: number, startTime: string }) => {\r\n            setMembers(membersInThisRoom)\r\n            if(roundDetails){\r\n                const { wordLength, startTime } = roundDetails\r\n                if(wordLength === 0){\r\n                    history.replace(\"/playground\")\r\n                    return\r\n                }\r\n                let word = \"\"\r\n                for(let i = 0; i < wordLength; i++){\r\n                    word += \"_ \"\r\n                }\r\n                setSelectedWord(word)\r\n                startCountdown(startTime)\r\n                history.replace(\"/playground\")\r\n            }\r\n        })\r\n\r\n        socket.emit(\"join room\", { \r\n            roomID: room, \r\n            name: getName(), \r\n            avatar: getAvatar() + 1\r\n        })\r\n\r\n        socket.on(\"game started\", (round_length: number) => {\r\n            setRoundLength(round_length)\r\n            history.replace(\"/playground\")\r\n        })\r\n        \r\n        socket.on(\"new host\", () => {\r\n            setIsHost(true)\r\n        })\r\n\r\n        socket.on(\"invalid room\", () => {\r\n            toastError('Invalid Room')\r\n            socket.disconnect()\r\n            setRoom(\"\")\r\n            history.replace(\"/\")\r\n        })\r\n    }\r\n\r\n    const socketFns = () => {\r\n        const socket = getSocket()\r\n\r\n        socket.on(\"new member\", (member: Member) => {\r\n            addMember(member)\r\n        })\r\n\r\n        socket.on(\"someone left\", (member: string) => {\r\n            removeMember(member)\r\n        })\r\n\r\n        socket.on(\"something broke\", () => {\r\n            toastError('Something went wrong, please try again later')\r\n        })\r\n    }\r\n\r\n    const modalHandler = () => {\r\n        setModalOpen(false)\r\n        nonHostSocketFns()\r\n        socketFns()\r\n    }\r\n\r\n    const startGame = ({ round_length, numRounds }: Settings) => {\r\n        getSocket().emit(\"start game\", {\r\n            round_length,\r\n            numRounds\r\n        })\r\n        history.replace(\"/playground\")\r\n    }\r\n\r\n    return (\r\n        <div id=\"lobbyBackground\">\r\n            <h1 id=\"lobbyTitle\">Lobby</h1>\r\n            <Grid container>\r\n                {isHost && \r\n                    <Grid item md={4} sm={4} xs={12} style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <GameSettings numMembers={members.length} startGame={startGame} />\r\n                    </Grid>\r\n                }\r\n                <Grid item md={isHost ? 8 : 12} sm={isHost ? 8 : 12} xs={12} style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    {getName() !== \"\" && <LobbyMembers members={members} isHost={isHost} socketID={getSocket().id} />}\r\n                </Grid>\r\n            </Grid>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={modalOpen}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500\r\n                }}\r\n            >\r\n                <Fade in={modalOpen}>\r\n                    <div className={classes.paper}>\r\n                        <ModalBody modalHandler={modalHandler} />\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Lobby","import create from 'zustand';\r\n\r\ntype State = {\r\n    chats: Message[]\r\n    addChat: (newChat: Message) => void\r\n    clearChats: () => void\r\n}\r\n\r\ntype Message = {\r\n    socketID: string\r\n    sender: string\r\n    message: string\r\n    color: string\r\n}\r\n\r\nconst INIT_STATE = {\r\n    chats: []\r\n}\r\n\r\nconst useStore = create<State>((set, get) => ({\r\n    ...INIT_STATE,\r\n    addChat: (newChat: Message) => set(state => ({ chats: [...state.chats, newChat] })),\r\n    clearChats: () => set({ ...INIT_STATE })\r\n}))\r\n\r\nexport default useStore","import React, { useCallback } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport { Button } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './styles/ResultCard.css';\r\n\r\ntype Member = {\r\n    socketID: string\r\n    memberDetails: {\r\n        name: string\r\n        avatar: number\r\n    }\r\n    score: number\r\n}\r\n\r\ntype Props = {\r\n    memberScores: Member[]\r\n}\r\n\r\nconst ResultCard: React.FC<Props> = ({ memberScores }) => {\r\n    const getSocket = useStore(useCallback(state => state.getSocket, []))\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <>\r\n            <h2 id=\"gameOverTitle\">Game Over!</h2>\r\n            <div id=\"resultsContainer\">\r\n                <table>\r\n                    {memberScores.map((member, index) => (\r\n                        <tr>\r\n                            <td><b className=\"resultContent\">#{index + 1}</b></td>\r\n                            <td><span className=\"resultContent\">{member.socketID === getSocket().id ? \"You\" : member.memberDetails.name}</span></td>\r\n                            <td><span className=\"resultContent\">{member.score}</span></td>\r\n                        </tr>\r\n                    ))}\r\n                </table>\r\n            </div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => history.replace(\"/\")}>Home</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResultCard","import React, { useRef, useEffect, useCallback, useState, memo } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport useChatsStore from '../zustand/chats';\r\nimport useGameStore from '../zustand/game';\r\nimport ResultCard from '../components/ResultCard';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Modal, Backdrop, Fade, Collapse, Button } from \"@material-ui/core\";\r\nimport { toastInfo } from './Toast';\r\nimport './styles/SketchBoard.css';\r\n\r\ntype Coordinates = {\r\n    x: number\r\n    y: number\r\n}\r\n\r\ntype Member = {\r\n    socketID: string\r\n    memberDetails: {\r\n        name: string\r\n        avatar: number\r\n    }\r\n    score: number\r\n}\r\n\r\ntype Message = {\r\n    socketID: string\r\n    sender: string\r\n    message: string\r\n    color: string\r\n}\r\n\r\ntype Stroke = {\r\n    newCoordinates: Coordinates \r\n    currentCoordinates: Coordinates\r\n    color: string\r\n}\r\n\r\ntype HandleEventTypeProps = {\r\n    e: MouseEvent | TouchEvent\r\n    toDraw: boolean\r\n    setPosition: boolean\r\n}\r\n\r\ntype Props = {\r\n    getColor: () => string\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\"\r\n    },\r\n    paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"2px solid #000\",\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3)\r\n    }\r\n}));\r\n\r\nconst Sketchboard: React.FC<Props> = ({ getColor }) => {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null)\r\n    const isDrawing = useRef<boolean>(false)\r\n    const position = useRef<Coordinates>({ x: 0, y: 0 })\r\n    const strokesBuffer = useRef<Array<Stroke>>([])\r\n    const wordChoices = useRef<Array<string>>([])\r\n    const overlayContent = useRef<string | Member[]>(\"\")\r\n\r\n    const [canvasSize, setCanvasSize] = useState<number>(500);\r\n    const [overlay, setOverlay] = useState<boolean>(false);\r\n    const [open, setOpen] = useState<boolean>(false);\r\n    \r\n    const classes = useStyles();\r\n\r\n    const { getSocket, reset } = useStore(useCallback(state => ({\r\n        getSocket: state.getSocket,\r\n        reset: state.reset\r\n    }), []))\r\n\r\n    const { addChat, clearChats } = useChatsStore(useCallback(state => ({\r\n        addChat: state.addChat,\r\n        clearChats: state.clearChats\r\n    }), []))\r\n\r\n    const { myTurn, setMyTurn, getMyTurn, roundLength, setSelectedWord, startCountdown } = useGameStore(useCallback(state => ({\r\n        myTurn: state.myTurn,\r\n        setMyTurn: state.setMyTurn,\r\n        getMyTurn: state.getMyTurn,\r\n        roundLength: state.roundLength,\r\n        setSelectedWord: state.setSelectedWord,\r\n        startCountdown: state.startCountdown\r\n    }), []))\r\n\r\n    useEffect(() => {\r\n        init()\r\n        const strokeSendingInterval = setInterval(() => {\r\n            sendStrokes()\r\n        }, 100)  // send group of strokes every 100ms instead of every stroke one by one to prevent server overload\r\n        return () => {\r\n            window.removeEventListener(\"resize\", canvasSizeHandler)\r\n            clearInterval(strokeSendingInterval)\r\n        }\r\n    }, [])\r\n\r\n    const init = () => {\r\n        if(!canvasRef.current){\r\n            return\r\n        }\r\n        const socket = getSocket()\r\n        \r\n        socket.on(\"receiveStrokes\", (strokes: Stroke[]) => {\r\n            for(let stroke of strokes) {\r\n                const { newCoordinates, currentCoordinates, color } = stroke\r\n                draw(newCoordinates, color, currentCoordinates)\r\n            }\r\n        })\r\n        \r\n        socket.on(\"turn\", (words: string[]) => {\r\n            wordChoices.current = words\r\n            setOpen(true)\r\n            setMyTurn(true)\r\n            clearCanvas()\r\n        })\r\n        \r\n        socket.on(\"someone choosing word\", (name: string) => {\r\n            overlayContent.current = `${name} is choosing a word`\r\n            setOverlay(true)\r\n            setMyTurn(false)\r\n            clearCanvas()\r\n        })\r\n        \r\n        socket.on(\"start guessing\", () => {\r\n            toastInfo('start guessing')\r\n            setOverlay(false)\r\n            startCountdown()\r\n        })\r\n        \r\n        socket.on(\"auto-selected\", () => {\r\n            const turn = getMyTurn()\r\n            if(turn){\r\n                setOpen(false)\r\n                timerForNextTurn(socket)\r\n                setSelectedWord(wordChoices.current[0])\r\n            }\r\n            else{\r\n                toastInfo('start guessing')\r\n            }\r\n            setOverlay(false)\r\n            startCountdown()\r\n        })\r\n\r\n        socket.on(\"guesses\", (message: Message) => {\r\n            addChat(message)\r\n        })\r\n        \r\n        socket.on(\"game over\", (results: Member[]) => {\r\n            toastInfo('Game over')\r\n            overlayContent.current = results\r\n            setOverlay(true)\r\n            setMyTurn(false)\r\n            setOpen(false)\r\n            socket.disconnect()\r\n            reset()\r\n            clearChats()\r\n        })\r\n        \r\n        canvasSizeHandler()\r\n        attachEventListeners()\r\n    }\r\n\r\n    useEffect(() => {\r\n        canvasBackground('white')\r\n    }, [canvasSize])\r\n\r\n    const attachEventListeners = () => {\r\n        window.addEventListener(\"resize\", canvasSizeHandler)\r\n\r\n        const canvas = canvasRef.current\r\n\r\n        canvas?.addEventListener('mousedown',  onMouseDown)\r\n        canvas?.addEventListener('mousemove', onMouseMove)\r\n        canvas?.addEventListener('mouseup', onMouseUp)\r\n        canvas?.addEventListener('mouseleave', onMouseUp)\r\n\r\n        canvas?.addEventListener('touchstart',  onMouseDown)\r\n        canvas?.addEventListener('touchmove',  onMouseMove)\r\n        canvas?.addEventListener('touchend', onMouseUp)\r\n        canvas?.addEventListener('touchcancel', onMouseUp)\r\n    }\r\n\r\n    const onMouseDown = useCallback((e: MouseEvent | TouchEvent): void => {\r\n        console.log(\"mousedown\")\r\n        isDrawing.current = true\r\n        handleEventType({ e, toDraw: false, setPosition: true })\r\n    }, [])\r\n\r\n    const onMouseMove = (e: MouseEvent | TouchEvent): void => {\r\n        if(isDrawing.current){\r\n            console.log(\"mousemove true\")\r\n            handleEventType({ e, toDraw: true, setPosition: true })\r\n        }\r\n    }\r\n\r\n    const onMouseUp = (e: MouseEvent | TouchEvent): void => {\r\n        console.log(\"mouseup\")\r\n        if(isDrawing.current){\r\n            isDrawing.current = false\r\n            handleEventType({ e, toDraw: true, setPosition: false })\r\n        }\r\n    }\r\n\r\n    const handleEventType = ({ e, toDraw, setPosition }: HandleEventTypeProps): void => {\r\n        if(!canvasRef.current){\r\n            return\r\n        }\r\n        let coordinates: Coordinates\r\n        if(e instanceof MouseEvent){\r\n            coordinates = {\r\n                x: e.pageX - canvasRef.current.offsetLeft,\r\n                y: e.pageY - canvasRef.current.offsetTop\r\n            }\r\n            console.log(coordinates, canvasRef.current.offsetTop, canvasRef.current.offsetLeft)\r\n        }\r\n        else{\r\n            coordinates = {\r\n                x: e.changedTouches[0].clientX - canvasRef.current.offsetLeft,\r\n                y: e.changedTouches[0].clientY - canvasRef.current.offsetTop\r\n            }\r\n            console.log(coordinates)\r\n        }\r\n        if(toDraw){\r\n            const color = getColor()\r\n            draw({\r\n                x: coordinates.x,\r\n                y: coordinates.y\r\n            }, color)\r\n            strokesBuffer.current.push({\r\n                newCoordinates: coordinates, \r\n                currentCoordinates: {\r\n                    x: position.current?.x / canvasSize,\r\n                    y: position.current?.y / canvasSize\r\n                },\r\n                color\r\n            })\r\n        }\r\n        if(setPosition){\r\n            position.current = coordinates\r\n        }\r\n    }\r\n\r\n    const draw = ({ x: newX, y: newY }: Coordinates, color: string, currentCoordinates?: Coordinates): void => {\r\n        const currentContext = canvasRef.current?.getContext('2d')\r\n        if(!currentContext){\r\n            return\r\n        }\r\n        currentContext.lineWidth = 2\r\n        currentContext.strokeStyle = color\r\n        currentContext.beginPath();\r\n        \r\n        if(currentCoordinates){\r\n            currentContext.moveTo(currentCoordinates.x * canvasSize, currentCoordinates.y * canvasSize);\r\n        }\r\n        else{\r\n            currentContext.moveTo(position.current.x, position.current.y);\r\n        }\r\n        currentContext.lineTo(newX, newY);\r\n        \r\n        currentContext.closePath();\r\n        currentContext.stroke();\r\n    }\r\n\r\n    const sendStrokes = () => {\r\n        const strokes = strokesBuffer.current\r\n        if(strokes.length > 0) {\r\n            getSocket().emit(\"drawing\", strokes)\r\n            strokesBuffer.current = []\r\n        }\r\n    }\r\n\r\n    const chooseWord = (choice: string) => {\r\n        const socket = getSocket()\r\n        socket.emit(\"chosen word\", choice)\r\n        timerForNextTurn(socket)\r\n        setOpen(false)\r\n        setOverlay(false)\r\n        startCountdown()\r\n        if(myTurn){\r\n            setSelectedWord(choice)\r\n        }\r\n    }\r\n\r\n    const timerForNextTurn = (socket: SocketIOClient.Socket) => {\r\n        setTimeout(() => {\r\n            setMyTurn(false)\r\n            socket.emit(\"next turn\")\r\n        }, roundLength * 1000)\r\n    }\r\n\r\n    const canvasBackground = (color: string) => {\r\n        const currentContext = canvasRef.current?.getContext('2d')\r\n        if(!currentContext){\r\n            return\r\n        }\r\n        currentContext.fillStyle = color\r\n        currentContext.fillRect(0, 0, canvasSize, canvasSize);\r\n\r\n    }\r\n\r\n    const canvasSizeHandler = () => {\r\n        const screenWidth = window.outerWidth\r\n        if(screenWidth < 540){\r\n            setCanvasSize(Math.round(0.97 * screenWidth))\r\n        }\r\n        else{\r\n            setCanvasSize(500)\r\n        }\r\n    }\r\n\r\n    const clearCanvas = () => {\r\n        const currentContext = canvasRef.current?.getContext('2d')\r\n        if(!currentContext) return\r\n        currentContext.clearRect(0, 0, canvasSize, canvasSize);\r\n        canvasBackground('white')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"canvasContainer\" style={{ height: canvasSize }}>\r\n                <Collapse in={overlay}>\r\n                    <div className=\"sketchboardLayers\" id=\"overlay\" style={{ width: canvasSize, height: canvasSize }}>\r\n                        <div id=\"overlayContainer\">\r\n                            {typeof overlayContent.current === \"string\" ? \r\n                                <span className=\"overlayText\">{overlayContent.current}</span>\r\n                            : \r\n                                <ResultCard memberScores={overlayContent.current} />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </Collapse>\r\n                <div>\r\n                    <canvas height={canvasSize} width={canvasSize} ref={canvasRef} style={{ pointerEvents: myTurn ? 'auto' : 'none' }}></canvas>\r\n                </div>\r\n            </div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}>\r\n                        <h2 id=\"chooseWordTitle\">Choose a word!</h2>\r\n                        {wordChoices.current.map(word => (\r\n                            <Button variant=\"contained\" color=\"primary\" style={{ marginRight: 3, marginLeft: 3 }} onClick={() => chooseWord(word)}>{word}</Button>\r\n                        ))}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Sketchboard)","import React, { useState, useEffect } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { colors } from \"../data/data.json\";\r\nimport './styles/Palette.css';\r\n\r\ntype Props = {\r\n    setColorInParent: (selectedColor: string) => void\r\n}\r\n\r\nconst Palette: React.FC<Props> = ({ setColorInParent }) => {\r\n    const [selectedColor, setSelectedColor] = useState<string>(colors[0])\r\n    const [mobileView, setMobileView] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        setColorInParent(selectedColor)\r\n        palleteHandler()\r\n        window.addEventListener(\"resize\", palleteHandler)\r\n        return(() => {\r\n            window.removeEventListener(\"resize\", palleteHandler)\r\n        })\r\n    }, [])\r\n\r\n    const palleteHandler = () => {\r\n        const screenWidth = window.outerWidth\r\n        setMobileView(mobileView => {\r\n            if(mobileView && screenWidth >= 600){\r\n                return false\r\n            }\r\n            else if(!mobileView && screenWidth < 600){\r\n                return true\r\n            }\r\n            return mobileView\r\n        })\r\n    }\r\n\r\n    const handleColorChange = (color: string) => {\r\n        setSelectedColor(color)\r\n        setColorInParent(color)\r\n    }\r\n\r\n    const displayColors = () => {\r\n        let colorsJSX = []\r\n        for(let i=0; i<5; i++){\r\n            const colorGroup = []\r\n            for(let j = i*5; j < (i+1)*5; j++){\r\n                const isSelected = colors[j] === selectedColor\r\n                colorGroup.push(\r\n                    <div style={{ border: isSelected ? '1.8px solid white' : '' }} \r\n                        onClick={() => handleColorChange(colors[j])}\r\n                    >\r\n                        <div className=\"color\" style={{ backgroundColor: colors[j] }}></div>\r\n                    </div>\r\n                )\r\n            }\r\n            colorsJSX.push(\r\n                <Grid item id=\"colorsContainer\"\r\n                    style={{ justifyContent: (mobileView ? 'center' : ((i%2 === 0) ? 'flex-end' : 'flex-start')) }}\r\n                    md={6} sm={6} xs={12}\r\n                >\r\n                    {colorGroup}\r\n                </Grid>\r\n            )\r\n        }\r\n        return colorsJSX\r\n    }\r\n\r\n    return (\r\n        <div id=\"paletteContainer\">\r\n            <Grid container>\r\n                {displayColors()}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Palette","import React, { useState, useEffect, useCallback } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport { Card, CardContent } from '@material-ui/core';\r\nimport './styles/ScoreCard.css';\r\n\r\ntype Member = {\r\n    socketID: string\r\n    memberDetails: {\r\n        name: string\r\n        avatar: number\r\n    }\r\n    score: number\r\n}\r\n\r\nconst ScoresList: React.FC = (props) => {\r\n    const { members, setMembers, getSocket } = useStore(useCallback(state => ({\r\n        members: state.members,\r\n        setMembers: state.setMembers,\r\n        getSocket: state.getSocket\r\n    }), []))\r\n\r\n    const [smallScreen, setSmallScreen] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        init()\r\n        scoreCardLayout()\r\n        window.addEventListener(\"resize\", scoreCardLayout)\r\n        return () => {\r\n            window.removeEventListener(\"resize\", scoreCardLayout)\r\n        }\r\n    }, [])\r\n\r\n    const init = () => {\r\n        const socket = getSocket()\r\n        socket.on(\"updated scores\", (members: Member[]) => {\r\n            setMembers(members)\r\n        })\r\n    }\r\n\r\n    const scoreCardLayout = () => {\r\n        const screenWidth = window.outerWidth\r\n        setSmallScreen(smallScreen => {\r\n            if(smallScreen && screenWidth >= 960){\r\n                return false\r\n            }\r\n            else if(!smallScreen && screenWidth < 960){\r\n                return true\r\n            }\r\n            return smallScreen\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div id=\"scoreCardContainer\">\r\n            <Card id=\"scoreCard\">\r\n                {members.length > 0 && <CardContent id=\"scoreCardContent\">\r\n                    {members.map((member, index) => {\r\n                        if(smallScreen) {\r\n                            return (\r\n                                <div className=\"scoreCardSmallScreen\">\r\n                                    <p className=\"scoreCardName\">{member.memberDetails.name}</p>\r\n                                    <img className=\"scoreCardAvatar\" src={`/images/avatar_${member.memberDetails.avatar}.jpg`} />\r\n                                    <p className=\"score\"><b>{member.score}</b></p>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        else {\r\n                            return (\r\n                                <>\r\n                                    <div className=\"scoreCardBigScreen\">\r\n                                        <b>#{index + 1}</b>\r\n                                        <img className=\"scoreCardAvatar\" src={`/images/avatar_${member.memberDetails.avatar}.jpg`} />\r\n                                        <div>\r\n                                            <p className=\"scoreCardName\">{member.memberDetails.name}</p>\r\n                                            <p className=\"score\">Score: <b>{member.score}</b></p>\r\n                                        </div>\r\n                                    </div> \r\n                                    {index !== (members.length - 1) && <hr />}\r\n                                </>\r\n                            )\r\n                        }\r\n                    })}\r\n                </CardContent>}\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(ScoresList)","import React, { useState, useEffect } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport './styles/GuessInput.css';\r\n\r\ntype Props = {\r\n    submitGuess: (e: React.FormEvent, guess: string) => void\r\n}\r\n\r\nconst GuessInput: React.FC<Props> = ({ submitGuess }) => {\r\n    const [guess, setGuess] = useState<string>(\"\")\r\n\r\n    const submit = (e: React.FormEvent) => {\r\n        submitGuess(e, guess)\r\n        setGuess(\"\")\r\n    }\r\n\r\n    return (\r\n        <form autoComplete=\"off\" noValidate id=\"guessInputForm\" onSubmit={submit}>\r\n            <TextField id=\"standard-basic\" label=\"Enter guess\" value={guess} onChange={e => setGuess(e.target.value)} />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" id=\"submitGuess\" disabled={guess === \"\"}>Submit</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default GuessInput","import React, { useCallback, useRef, useEffect } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport useGameStore from '../zustand/game';\r\nimport useChatsStore from '../zustand/chats';\r\nimport GuessInput from './GuessInput';\r\nimport { Card, CardContent } from '@material-ui/core';\r\nimport './styles/Chatbox.css';\r\n\r\nconst Chatbox: React.FC = () => {\r\n    const getSocket = useStore(useCallback(state => state.getSocket, []))\r\n\r\n    const myTurn = useGameStore(useCallback(state => state.myTurn, []))\r\n\r\n    const chats = useChatsStore(useCallback(state => state.chats, []))\r\n\r\n    const chatboxRef = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        if(!chatboxRef.current) return\r\n        chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight\r\n    }, [chats])\r\n\r\n    const submitGuess = (e: React.FormEvent, guess: string) => { \r\n        e.preventDefault()\r\n        getSocket().emit(\"guess\", guess)\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardContent id=\"chatboxContainer\">\r\n                <div id=\"chatbox\" ref={chatboxRef} style={{ height: myTurn ? '100%' : '85%' }}>\r\n                    {chats.map((chat, index) => (\r\n                        <div className=\"guessContainer\" key={index}>\r\n                            <p style={{ color: chat.color }}><b>{chat.socketID === getSocket().id ? \"You\" : chat.sender}</b>{\": \" + chat.message}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                {!myTurn && \r\n                    <div>\r\n                        <GuessInput submitGuess={submitGuess} />\r\n                    </div>\r\n                }\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default React.memo(Chatbox)","import React, { useCallback } from 'react';\r\nimport useGameStore from '../zustand/game';\r\n\r\nconst Timer: React.FC = () => {\r\n    const timeRemaining = useGameStore(useCallback(state => state.timeRemaining, []))\r\n\r\n    const displayTime = () => {\r\n        const minutes = Math.floor(timeRemaining / 60)\r\n        let seconds: number|string = (timeRemaining - (minutes * 60))\r\n        if(seconds < 10){\r\n            seconds = \"0\" + seconds.toString()\r\n        }\r\n        return `${minutes}:${seconds}`\r\n    }\r\n\r\n    return (\r\n        <span style={{ fontSize: 25, marginLeft: 6 }}>{displayTime()}</span>\r\n    )\r\n}\r\n\r\nexport default Timer","import React, { useState, useEffect, useCallback } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport useGameStore from '../zustand/game';\r\n\r\nconst Word: React.FC = () => {\r\n    const getSocket = useStore(state => state.getSocket)\r\n\r\n    const { myTurn, selectedWord, setSelectedWord } = useGameStore(useCallback(state => ({\r\n        myTurn: state.myTurn,\r\n        selectedWord: state.selectedWord,\r\n        setSelectedWord: state.setSelectedWord\r\n    }), []))\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    const init = () => {\r\n        const socket = getSocket()\r\n        \r\n        // listeners for displaying appropriate blanks according to word length for users guessing\r\n        socket.on(\"start guessing\", (wordLength: number) => {\r\n            generateUnderscores(wordLength)\r\n        })\r\n\r\n        socket.on(\"auto-selected\", (wordLength: number) => {\r\n            if(!myTurn){\r\n                generateUnderscores(wordLength)\r\n            }\r\n        })\r\n    }\r\n\r\n    const generateUnderscores = (wordLength: number) => {\r\n        let word = \"\"\r\n        for(let i = 0; i < wordLength; i++) {\r\n            word += \"_ \"\r\n        }\r\n        setSelectedWord(word)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p style={{ fontSize: 30, margin: 0 }}>{selectedWord}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Word","import React, { useState, useEffect } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport './styles/Score.css';\r\n\r\nconst Word: React.FC = (props) => {\r\n    const [score, setScore] = useState<number>(0)\r\n\r\n    const getSocket = useStore(state => state.getSocket)\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    const init = () => {\r\n        const socket = getSocket()\r\n        socket.on(\"your score\", (score: number) => {\r\n            setScore(currentScore => (currentScore + score)) // increment score\r\n        })\r\n    }\r\n\r\n    return (\r\n        <p id=\"score\">Score: <b>{score}</b></p>\r\n    )\r\n}\r\n\r\nexport default Word","import React from 'react';\r\nimport { Card } from '@material-ui/core';\r\nimport Timer from './Timer';\r\nimport Word from './Word';\r\nimport Score from './Score';\r\nimport \"./styles/GameBar.css\";\r\n\r\nconst GameBar: React.FC = () => {\r\n    return (\r\n        <Card id=\"gameBar\">\r\n            <div id=\"objectsContainer\">\r\n                <Timer />\r\n                <Word />\r\n                <Score />\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default GameBar","import React, { useEffect, useCallback, useRef, useState } from 'react';\r\nimport useStore from '../zustand/store';\r\nimport useGameStore from '../zustand/game';\r\nimport SketchBoard from '../components/SketchBoard';\r\nimport Palette from '../components/Palette';\r\nimport ScoreCard from '../components/ScoreCard';\r\nimport Chatbox from '../components/Chatbox';\r\nimport GameBar from '../components/GameBar';\r\nimport { Grid, Button, Drawer } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './styles/Playground.css';\r\n\r\nconst Playground: React.FC = (props) => {\r\n    const color = useRef<string>(\"\")\r\n\r\n    const [chatDrawer, setChatDrawer] = useState<boolean>(false)\r\n    const [smallScreenView, setSmallScreenView] = useState<boolean>(false)\r\n\r\n    const getRoom = useStore(useCallback(state => state.getRoom, []))\r\n\r\n    const myTurn = useGameStore(useCallback(state => state.myTurn, []))\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    const init = () => {\r\n        if(getRoom() === \"\"){\r\n            history.replace(\"/\")\r\n            return\r\n        }\r\n        layoutHandler()\r\n        window.addEventListener(\"resize\", layoutHandler)\r\n    }\r\n\r\n    const layoutHandler = () => {\r\n        const screenWidth = window.outerWidth\r\n        setSmallScreenView(smallScreenView => {\r\n            if(smallScreenView && screenWidth >= 960){\r\n                return false\r\n            }\r\n            else if(!smallScreenView && screenWidth < 960){\r\n                return true\r\n            }\r\n            return smallScreenView\r\n        })\r\n    }\r\n\r\n    const setColor = (selectedColor: string) => {\r\n        color.current = selectedColor\r\n    }\r\n\r\n    const getColor = () => {\r\n        return color.current\r\n    }\r\n\r\n    return (\r\n        <div id=\"playgroundBackground\">\r\n            <h1 id=\"playgroundTitle\">Playground</h1>\r\n            <div id=\"gameBarContainer\">\r\n                <div style={{ width: '85%' }}>\r\n                    <GameBar />\r\n                </div>\r\n            </div>\r\n            <Grid container>\r\n                <Grid item md={2} sm={12} xs={12}>\r\n                    <ScoreCard />\r\n                </Grid>\r\n                <Grid item md={8} sm={12} xs={12}>\r\n                    <SketchBoard getColor={getColor} />\r\n                    {myTurn && \r\n                        <Palette setColorInParent={setColor} />\r\n                    }\r\n                </Grid>\r\n                {!smallScreenView && \r\n                    <Grid item md={2}>\r\n                        <div style={{ width: '95%' }}>\r\n                            <Chatbox />\r\n                        </div>\r\n                    </Grid>\r\n                }\r\n            </Grid>\r\n            {smallScreenView && \r\n                <div>\r\n                    <Button id=\"drawerButton\" onClick={() => setChatDrawer(true)}>\r\n                        <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path fill-rule=\"evenodd\" d=\"M14 0a2 2 0 0 1 2 2v12.793a.5.5 0 0 1-.854.353l-2.853-2.853a1 1 0 0 0-.707-.293H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12z\"/>\r\n                        </svg>\r\n                    </Button>\r\n                    <Drawer anchor=\"right\" open={chatDrawer} onClose={() => setChatDrawer(false)}>\r\n                        <div id=\"drawerChatbox\">\r\n                            <Chatbox />\r\n                        </div>\r\n                    </Drawer>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Playground","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Home from './views/Home';\nimport Lobby from './views/Lobby';\nimport Playground from './views/Playground';\nimport Toast from './components/Toast';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/lobby/:room\" component={Lobby} />\n        <Route exact path=\"/playground\" component={Playground} />\n      </BrowserRouter>\n      <Toast />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}